[ { "title": "[Android] 뷰 아키텍처", "url": "/posts/Android-VIew-Architect/", "categories": "Android", "tags": "Android, Java, Architect, View, ViewGroup, DOM, Hierarchy", "date": "2023-04-29 00:00:00 +0900", "snippet": "Android 뷰 아키텍처Android 뷰 계층구조Android 뷰의 계층구조 알아보기뷰의 기본 구조는 뷰 객체간 계층으로 이루어져 있으며 SW모델로 이야기하면 DOM(Document Object Model)을 따르고 있으며디자인 패턴으로는 Gof 디자인 패턴의 Composite 패턴이 적용된 구조이다.DOM(Document Object Model)DOM(Document Object Model)은 문서 객체 모델을 의미한다.HTML, XML과 같은 마크업 언어로 작성된 문서의 구조와 내용에 대한 표현을 기반으로 객체 모델을 구성하는 방식으로 트리 구조로 이루어져 있다.이 트리 구조는 문서의 각 요소들을 객체로 표현하여 구성되며 각 객체들은 각 요소들이 가지는 속성/메소드를 포함한다.DOM구조를 잘 사용하면 문서의 내용, 구조를 동적으로 변경하거나 특정 요소들에 접근하여 조작하는 작업들이 가능하다.디렉터리-파일 구조(출처: 깡샘의 안드로이드 프로그래밍)뷰의 계층구조안드로이드 뷰 클래스 기본구조가 SW모델로 DOM(Document Object Model)을 따른다고 하였으므로그에 맞춰 기본골격을 클래스 다이어그램(Class Diagram)으로 그리면 아래와 같다.뷰 계층구조(출처: 깡샘의 안드로이드 프로그래밍)디렉터리 계층구조와 뷰의 계층구조가 동일함을 확인할 수 있다.전체적인 뷰 객체의 계층구조를 예시로 그려보면 아래와 같이 표현할 수 있다.뷰 계층구조(출처: 깡샘의 안드로이드 프로그래밍)안드로이드 뷰 클래스도 디렉터리 클래스와 같이 객체를 원하는 만큼 생성한 다음 계층구조로 묶어서 사용한다.참고자료 깡샘의 안드로이드 프로그래밍 ChatGPT" }, { "title": "[Android] 안드로이드 컴포넌트 기반 개발", "url": "/posts/Android-Component/", "categories": "Android", "tags": "Android, Java, Architect, Component", "date": "2023-04-23 00:00:00 +0900", "snippet": "Android 앱 아키텍처 특징Android 컴포넌트Android 컴포넌트란?컴포넌트는 앱의 구성단위로 안드로이드 앱을 작성한다는 것은 컴포넌트를 작성한다는 것과 동일하다.안드로이드에서 컴포넌트의 물리적인 모습은 Class(클래스)로 하나의 클래스가 컴포넌트이다.단, 모든 클래스가 컴포넌트인 것은 아니다. 일반 클래스와 컴포넌트로 구분할 수 있는데 이 둘의 차이는 생명주기를 누가 관리하는지로 구분할 수 있다. 일반 클래스 - 코드로 생명주기를 관리한다. 즉, 필요할 때 new 연산자로 생성, 필요 없어지면 null대입으로 소멸시킨다. 컴포넌트 - 생명주기를 안드로이드 시스템이 생성해 관리 및 소멸함컴포넌트 = 앱 내 독립적 실행단위컴포넌트도 클래스이므로 시스템이 생명주기를 관리해 ‘독립적인 수행단위’로 동작한다.따라서 직접 코드로 해당 컴포넌트를 실행시키는 것이 아닌 Intent를 매개로 결합하지 않고 독립적으로 실행시키며독립적으로 실행할 수 있으므로 앱의 수행 시점이 다양할 수 있다.Android 컴포넌트 특징 안드로이드는 컴포넌트 기반의 개발이다. 각 컴포넌트는 개발자 코드 간 결합이 발생하지 않는다. 컴포넌트의 생명주기는 시스템이 관리해 앱 수행시점이 다양할 수 있다.Android 컴포넌트 종류 액티비티(Activity): 사용자 화면을 제공하는 컴포넌트, 안드로이드 앱은 클라이언트 측 애플리케이션이므로 화면 구성이 중요해 가장 많이 작성하는 컴포넌트 사용자 인터페이스(UI)를 제공하는 컴포넌트 애플리케이션 화면을 구성하는 기본 단위 하나의 애플리케이션은 여러개의 액티비티를 가질 수 있으며, 각 액티비티는 스택형태로 관리된다. 서비스(Service): 화면과 전혀 상관없이 눈에 보이지 않으며, 백그라운드에서 장시간 수행하는 컴포넌트 백그라운드에서 실행되는 컴포넌트 UI없이 장시간 수행됨 네트워크 연결, DB 엑세스 등 작업 처리 브로드캐스트리시버(BroadcastReceiver): 이벤트 모델 수행 컴포넌트로 인텐트 원리 이해 필요 안드로이드 시스템으로부터 다양한 이벤트를 수신하는 컴포넌트, 이벤트를 수신해 특정 작업을 처리하는 등 동작을 수행함 콘텐츠프로바이더(ContentProvider): 앱 간 데이터 공유 목적으로 사용하는 컴포넌트 애플리케이션 간 데이터를 공유하기 위한 컴포넌트, DB, FIle System 등 데이터에 접근할 수 있는 인터페이스를 제공 참고자료 깡샘의 안드로이드 프로그래밍 ChatGPT" }, { "title": "[Android] 안드로이드 플랫폼 아키텍처", "url": "/posts/Android-Platform-Architect/", "categories": "Android", "tags": "Android, Java, Architect", "date": "2023-03-11 00:00:00 +0900", "snippet": "Android 앱 개발 특징Android 플랫폼 아키텍처Android 아키텍처기본적인 안드로이드 플랫폼 아키텍처는 아래와 같다.안드로이드 소프트웨어 스택(출처: https://developer.android.com/guide/platform)안드로이드 플랫폼은 리눅스 커널 기반이며 HAL(Hardware Abstaction Layer)은 자바 API프레임워크에 하드웨어 기능을 이용하는 표준 인터페이스를 제공한다. System Apps: Android Appplication 개발에 필요한 API를 제공, 일반적인 Application이 해당 계층에 속함 (ex, SMS, Email, Calendar Application 등…), Android Application Layer로 생각하면 될 것 같음. Java API Framework: Android Application개발에 필요한 기본 기능을 제공, Android Application에서 필요한 기능을 구현하기 위해서 사용되며, 이러한 API는 핵심 모듈식 시스템 구성 요소 및 서비스를 재활용을 단순화하여 Android App을 제작하는데 필요한 빌딩블록을 구성함, Application Framework Layer로 생각하면 될 것 같음. Activity Manager - 앱의 수명 주기를 관리하고 공통 탐색 백 스택 제공 Window Manager - 앱의 Window Manager는 Display에 바인딩 됨, 앱 윈도우(Window)를 관리하고 디바이스 화면에 출력하는 역할을 수행함 Location Manager - 시스템 위치 서비스에 대한 액세스 제공 Telephony Manager - 디바이스의 전화 통신 서비스 및 정보에 대한 액세스 제공 Resource Manager - 현지화된 문자열, 그래픽 및 레이아웃 파일과 같은 코드가 아닌 리소스에 대한 액세스 제공 View System - 목록, 그리드, 텍스트 상자, 버튼 및 삽입 가능한 웹브라우저를 포함하여 앱의 UI를 빌드하는 데 사용 가능 Notification Manager - 모든 앱이 상태 표시줄에 사용자 지정 알림을 표시할 수 있도록 지원 Package Manager - 장치에 현재 설치되어 있는 응용 프로그램 패키지와 관련된 다양한 종류의 정보 액세스 제공 Content Providers - 앱이 주소록 앱과 같은 다른 앱의 데이터에 액세스하거나 자신의 데이터를 공유할 수 있도록 지원 Native C/C++ Libaries: Android Application 개발에 필요한 라이브러리 제공(ex, 그래픽 처리를 위한 OpenGL, DB관리를 위한 SQLite 등…), 추가로 C 또는 C++ 코드가 필요한 앱을 개발하는 경우에는 Android NDK를 사용하여 Native 코드에서 이러한 네이티브 플랫폼 라이브러리에 엑세스 가능, Libaries Layout로 생각하면 될 것 같음. Android Runtime: Android 5.0(API Level 21) 이상에서 실행하는 경우에는 각 앱이 자체 프로세스 내 자체 ART(Android 런타임) 인스턴스로 실행되며, API Level 21 이전 버전에서는 Dalvik이 Android 런타임이었음, 앱이 ART에서 제대로 실행되면 Dalvik에서도 제대로 실행되지만, 그 반대의 경우엔 제대로 실행된다는 보장이 없음, Android Runtime Layer로 생각하면 될 것 같음. HAL(하드웨어 추상화 계층): 상위수준 Java API 프레임워크에 기기 하드웨어 기능을 노출하는 표준 인터페이스를 제공, 여러 라이브러리 모듈로 구성되어 있음. Linux 커널: Android 플랫폼 기반은 Linux 커널임, Linux 커널을 사용하면 Android가 주요 보안 기능을 활성화하고 기기 제조업체가 널리 알려진 커널용 하드웨어 드라이버를 개발할 수 있음.안드로이드 런타임(ART)안드로이드 앱 개발은 Java언어를 사용한다. Java로 개발된 다른 애플리케이션은 런타임 때 JVM이 수행하지만, Android VM은 ART(ART는 API Level 21(Android 5.0)에서 새로 추가된 VM이며, 이전 버전 VM은 Dalvik을 이용)를 이용하며 그 위에 일반 애플리케이션 개발 시 이용할 수 있는 자바 API 프레임워크를 제공한다.ART 기능 (Android 공식 문서내용, 공부가 더 필요한 부분…) AOT(Ahead-of-time) 컴파일 가비지컬렉션(GC) 개선 개발 및 디버깅 개선ART 특징 (Chat GPT 답변 내용, 공부가 더 필요한 부분…) 빠른 실행속도: ART는 애플리케이션 실행 전 미리 컴파일(dex2oat 도구를 사용하여 컴파일, DEX파일을 입력으로 받음)하여 컴파일 된 앱을 생성하므로 Dalvik VM의 JIT(Just-in-Time) 컴파일 방식과 달리 미리 컴파일 &amp;gt; 최적화 된 코드를 생성해 실행속도가 빠름 작은 메모리 사용량: 이전 Dalvik VM에서는 필요한 메모리 공간을 할당했으나 ART는 메모리 사용량을 줄이기 위해서 필요한 메모리 공간만 할당함 앱의 시작속도 향상: ART는 미리 컴파일하여 최적화된 코드를 생성하므로 앱의 시작 속도가 향상됨 배터리 수명 향상: ART는 더 적은 CPU사용으로 더 적은 전력을 소모하므로 배터리 수명을 늘리는데 도움을 줌참고자료 깡샘의 안드로이드 프로그래밍 Android 플랫폼 아키텍처 (https://developer.android.com/guide/platform) Android 런타임(ART) 및 Dalvik (https://source.android.com/docs/core/runtime) ChatGPT" } ]
